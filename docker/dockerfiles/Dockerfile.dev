ARG NODE_VERSION=24.5.0
ARG S6_OVERLAY_VERSION=3.2.1.0

FROM node:${NODE_VERSION}-trixie-slim

ENV PYTHONUNBUFFERED=1

ENV DEBUG=${DEBUG:-True}
ENV ENVIRONMENT=${ENVIRONMENT:-development}
ENV LOG_LEVEL=${LOG_LEVEL:-WARNING}

ENV RUN_MIGRATIONS=${RUN_MIGRATIONS:-True}
ENV RUN_COMPILE_MESSAGES=${RUN_COMPILE_MESSAGES:-True}
ENV RUN_COLLECT_STATIC=${RUN_COLLECT_STATIC:-False}
ENV RUN_CREATE_SUPER_USER=${RUN_CREATE_SUPER_USER:-True}
ENV RUN_SEED_GROUPS=${RUN_SEED_GROUPS:-True}

ENV IS_CONTAINERIZED=True

ENV DEBIAN_FRONTEND=noninteractive


RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    curl ca-certificates \
    cron procps \
    nginx gcc xz-utils gettext python3 python3-pip python3-venv python3-dev git postgresql-client libpq-dev && \
    apt-get clean


# Make sure scripts in .local are usable:
ENV PATH="/root/.local/bin:${PATH}"

ARG S6_OVERLAY_VERSION
ENV S6_CMD_WAIT_FOR_SERVICES_MAXTIME=0

ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz /tmp
ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-x86_64.tar.xz /tmp
RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz && \
    tar -C / -Jxpf /tmp/s6-overlay-x86_64.tar.xz


COPY docker/nginx/nginx.conf /etc/nginx/sites-available/default
COPY docker/s6-rc.d /etc/s6-overlay/s6-rc.d

# Download the latest UV installer
ADD ./docker/third-party/uv/installer.sh /uv-installer.sh

# Run the installer then remove it
RUN sh /uv-installer.sh && rm /uv-installer.sh

# Python virtualenv paths
ENV VIRTUAL_ENV=/opt/venv
RUN uv venv ${VIRTUAL_ENV}
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

WORKDIR /var/www/redirect/backend/

# install the backend libraries:
COPY ./backend/pyproject.toml ./backend/uv.lock /var/www/redirect/backend/
RUN uv sync --active --locked --compile-bytecode

# install the frontend libraries:
COPY ./backend/assets assets
COPY ./backend/templates templates
COPY ./backend/package.json ./backend/postcss.config.js ./backend/vite.config.js ./

RUN npm i

# copy the backend source code:
COPY ./backend/ /var/www/redirect/backend/


# Make sure scripts in .local are usable:
ENV PATH=/root/.local/bin:$PATH

ARG VERSION
ARG REVISION
ENV VERSION=${VERSION}
ENV REVISION=${REVISION}

RUN touch /var/www/redirect/.version && \
    echo "$VERSION+$(echo ${REVISION} | cut -c 1-7)" > /var/www/redirect/.version

WORKDIR /var/www/redirect/

ENTRYPOINT ["/init"]

EXPOSE 8000 3000
